/**
 * Generated by orval v6.9.0 🍺
 * Do not edit manually.
 * Shared Expenses
 * OpenAPI spec version: 1.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getGetGroupsMock = () => ({
  groups: {
    id: faker.random.word(),
    name: faker.random.word(),
    members: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.random.word(),
      email: faker.internet.email(),
      name: faker.random.word(),
      role: faker.helpers.arrayElement(['owner', 'member']),
      joined: faker.random.word(),
    })),
    created: faker.random.word(),
    group_version: faker.datatype.number({ min: 0, max: undefined }),
  },
  current_page: faker.datatype.number({ min: 1, max: undefined }),
  total_pages: faker.datatype.number({ min: 1, max: undefined }),
});

export const getGetGroupIdMock = () => ({
  id: faker.random.word(),
  name: faker.random.word(),
  members: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.random.word(),
    email: faker.internet.email(),
    name: faker.random.word(),
    role: faker.helpers.arrayElement(['owner', 'member']),
    joined: faker.random.word(),
  })),
  created: faker.random.word(),
  group_version: faker.datatype.number({ min: 0, max: undefined }),
});

export const getGroupsMSW = () => [
  rest.get('*/groups', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetGroupsMock()),
    );
  }),
  rest.post('*/groups', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/group/:groupId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetGroupIdMock()),
    );
  }),
  rest.post('*/group/:groupId/addMember', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/group/:groupId/removeMember', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/group/:groupId/renameGroup', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
